@page "/claims"
@using InsuranceOrg.UI.Data
@using Newtonsoft.Json
@using insurance
@attribute [StreamRendering]
@inject ClaimsDataService claimsDataService

<PageTitle>My Processed claims</PageTitle>
<h1>My processed claims</h1>

@if (claims == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Amount ($)</th>
            <th>Code</th>
            <th>IssuerName</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var claim in claims)
        {
            <tr>
                <td>@claim.Date.ToShortDateString()</td>
                <td>@claim.Amount</td>
                <td>@claim.Code</td>
                <td>@claim.IssuerName</td>
                <td>@claim.OtherInfo</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private Claim[] claims;

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(2000);
        HttpClient client = new HttpClient();
        
        // Simpliest option to get request
        //claims = client.GetFromJsonAsync<List<Claim>>("http://localhost:5112/api/v1/claim/GetProcessedClaims").Result.ToArray();
        
        /* AutoRest Generated Code  option to get request
           -- how to generate files 
           sudo npm install -g autorest
           autorest --help       
           autorest --input-file=http://localhost:5112/swagger/v1/swagger.json --csharp --output-folder=InsuranceOrg.UI/Data/OpenApiClient/ --namespace=insurance
        */
        string apiUrl = "http://localhost:5112/";
        VersionedAPIClient vclient = new VersionedAPIClient(new Uri(apiUrl));
        var response = vclient.GetProcessedClaims();
        string jsonContent = response.Content.ToString();
        claims = JsonConvert.DeserializeObject<Claim[]>(jsonContent);
        
        /* old fashioned option to run request
         using (HttpClient httpClient = new HttpClient())
        {
            HttpResponseMessage response = await httpClient.GetAsync(apiUrl);
            response.EnsureSuccessStatusCode();
            string jsonContent = await response.Content.ReadAsStringAsync();
            claims = JsonConvert.DeserializeObject<Claim[]>(jsonContent);
        }*/
    }
}